/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF 0
#define CMK 1
#define GAME 2
#define LWR 3
#define ADJ 4

#define VU C_VOL_UP
#define VD C_VOL_DN
#define VM C_MUTE

/ {
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
//        |   ~  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7   |  8  |  9  |  0  |  \  |
//        | LALT |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  |  [  |
//        | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '  |
//        | LGUI |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  |  [  |
//                           | TAB | SPC | LWR |   | LWR | BKSP | DEL |
                        bindings = <
            &gresc      &kp N1   &kp N2   &kp N3   &kp N4   &kp N5      &kp N6   &kp N7   &kp N8    &kp N9   &kp N0    &kp BSLH
            &kp LALT    &kp Q    &kp W    &kp E    &kp R    &kp T       &kp Y    &kp U    &kp I     &kp O    &kp P     &kp LBKT
            &kp LCTRL   &kp A    &kp S    &kp D    &kp F    &kp G       &kp H    &kp J    &kp K     &kp L    &kp SEMI  &kp SQT
            &kp LGUI    &kp Z    &kp X    &kp C    &kp V    &kp B       &kp N    &kp M    &kp COMMA &kp DOT  &kp FSLH  &kp RBKT
                              &mt LSHFT TAB &kp SPACE &lt LWR RET       &lt LWR ESC &kp BSPC &mt RSHFT DEL
                        >;
                };
                colemak_layer {
// -----------------------------------------------------------------------------------------
//        |   ~  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7   |  8  |  9  |  0  |  \  |
//        | LALT |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  ;  |  [  |
//        | CTRL |  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |  '  |
//        | LGUI |  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  |  [  |
//                           | TAB | SPC | LWR |   | LWR | BKSP | DEL |
                        bindings = <
            &trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
            &trans  &kp Q   &kp W   &kp F   &kp P   &kp B       &kp J   &kp L   &kp U   &kp Y   &kp SEMI  &trans
            &trans  &kp A   &kp R   &kp S   &kp T   &kp G       &kp M   &kp N   &kp E   &kp I   &kp O   &trans
            &trans  &kp Z   &kp X   &kp C   &kp D   &kp V       &kp K   &kp H   &trans  &trans  &trans  &trans
                                    &trans  &trans  &trans      &trans  &trans  &trans
                        >;
                };
                game_layer {
// -----------------------------------------------------------------------------------------
//        |   ~  |  1  |  2  |  3  |  4  |  5  |   |  6  |  7   |  8   |  9  |  0  |  \  |
//        | LALT |  T  |  Q  |  W  |  E  |  R  |   |  Y  |  U   |  UP  |  O  |  P  |  [  |
//        | CTRL | SFT |  A  |  S  |  D  |  F  |   |  M  | LEFT | DOWN |RIGHT|  ;  |  '  |
//        | TAB  |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,   |  .  |  /  |  [  |
//                           | TAB | SPC | LWR |   | LWR | BKSP | DEL  |
                        bindings = <
            &trans     &kp N1    &kp N2  &kp N3  &kp N4  &kp N5      &kp N6  &kp N7   &kp N8    &kp N9      &kp N0         &trans
            &kp LALT   &kp T     &kp Q   &kp W   &kp E   &kp R       &kp Y   &kp U    &kp UP    &kp O       &kp P          &trans
            &kp LCTRL  &kp LSHFT &kp A   &kp S   &kp D   &kp F       &kp H   &kp LEFT &kp DOWN  &kp RIGHT   &mt RSHFT SEMI &trans
            &kp TAB    &kp Z     &kp X   &kp C   &kp V   &kp B       &kp N   &kp M    &trans    &trans      &trans         &trans
                                         &trans  &trans  &trans      &trans  &trans   &trans
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
//       |  F1  |  F2 |  F3 |  F4 |  F5 |  F6 |   |  F7  |  F8  |  F9 | F10 | F11 | F12 |
//       | LALT |  "  |  $  |  (  |  )  |  <  |   |  _   |   -  |  +  |  =  |     |  CMK  |
//       | CTRL |  {  |  }  |  [  |  ]  |  >  |   | LEFT | DOWN | UP  |RIGHT|     |  GME  |
//       | TAB  |  VU |  VD |  VM |     |     |   | PG_UP| PG_DN| HOME| END |CAPS | PSCRN |
//                          | TAB | SPC | LWR |   | LWR | BKSP | DEL  |
                        bindings = <
          &kp F1 &kp F2    &kp F3   &kp F4   &kp F5    &kp F6           &kp F7     &kp F8    &kp F9    &kp F10   &kp F11  &kp F12
          &trans &kp DQT   &kp DLLR &kp LPAR &kp RPAR  &kp LT           &kp UNDER  &kp MINUS &kp PLUS  &kp EQUAL &none    &tog CMK
          &trans &kp LBRC  &kp RBRC &kp LBKT &kp RBKT  &kp GT           &kp LEFT   &kp DOWN  &kp UP    &kp RIGHT &none    &tog GAME
          &trans &kp VU    &kp VD   &kp VM   &none     &trans           &kp PG_UP  &kp PG_DN &kp HOME  &kp END  &kp CAPS   &kp PSCRN
                                    &mo ADJ  &trans    &trans           &trans     &trans    &mo ADJ
                        >;
                };

                adjust_layer {
// -----------------------------------------------------------------------------------------
//       | RST  |BLDR |     |     |     |     |   |     |     |     |     | BLDR| RST  |
//       | BTCLR| BT0 | BT1 | BT2 | BT3 | BT4 |   | BT4 | BT3 | BT2 | BT1 | BT0 | BTCLR|
//       |      |     |     |     |     |     |   |     |     |     |     |     |      |
//                          |     |     |     |   |     |     |     |
                        bindings = <
                        &none &none &none &none &none &none &none &none &none &none &none &none
   &reset &bootloader        &none        &none        &none        &none              &none        &none        &none        &none             &bootloader &reset
          &bt BT_CLR   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4       &bt BT_SEL 4 &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0  &bt BT_CLR
          &none        &none        &none        &none        &none        &none              &none        &none        &none        &none        &none         &none
                                                                    &trans &out OUT_TOG &trans   &trans &out OUT_TOG &trans
                        >;
                };
        };
};
